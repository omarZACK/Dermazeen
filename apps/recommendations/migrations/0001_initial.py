# Generated by Django 5.2.4 on 2025-07-27 14:03

import apps.shared.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('assessment', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Ingredient',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('is_deleted', models.BooleanField(default=False, verbose_name='Is Deleted')),
                ('deleted_at', models.DateTimeField(blank=True, null=True, verbose_name='Deleted At')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is Active')),
                ('name', models.CharField(help_text='Unique name of the ingredient.', max_length=200, unique=True)),
                ('description', models.TextField(help_text='Description of the ingredient and its properties.')),
                ('is_allergen', models.BooleanField(default=False, help_text='Whether this ingredient is a common allergen.')),
                ('pregnancy_safe', models.BooleanField(default=True, help_text='Whether this ingredient is safe during pregnancy.')),
                ('safety_level', models.CharField(choices=[('safe', 'Safe'), ('caution', 'Use with Caution'), ('prescription', 'Prescription Only'), ('not_recommended', 'Not Recommended')], default='safe', help_text='General safety level of this ingredient.', max_length=15)),
            ],
            options={
                'verbose_name': 'Ingredient',
                'verbose_name_plural': 'Ingredients',
                'ordering': ['name'],
                'indexes': [models.Index(fields=['is_allergen'], name='recommendat_is_alle_cb488a_idx'), models.Index(fields=['pregnancy_safe'], name='recommendat_pregnan_a56a3a_idx'), models.Index(fields=['safety_level'], name='recommendat_safety__30afcb_idx')],
            },
        ),
        migrations.CreateModel(
            name='ProductCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('is_deleted', models.BooleanField(default=False, verbose_name='Is Deleted')),
                ('deleted_at', models.DateTimeField(blank=True, null=True, verbose_name='Deleted At')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is Active')),
                ('display_order', models.PositiveIntegerField(default=0, help_text='Order in which items should be displayed', verbose_name='Display Order')),
                ('category_name', models.CharField(help_text='Unique name of the product category.', max_length=100, unique=True)),
                ('description', models.TextField(help_text='Description of the product category.')),
                ('is_topical_only', models.BooleanField(default=True, help_text='Whether this category contains only topical products.')),
            ],
            options={
                'verbose_name': 'Product Category',
                'verbose_name_plural': 'Product Categories',
                'ordering': ['display_order'],
                'indexes': [models.Index(fields=['display_order'], name='recommendat_display_f92810_idx'), models.Index(fields=['is_topical_only'], name='recommendat_is_topi_e576a7_idx')],
            },
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('is_deleted', models.BooleanField(default=False, verbose_name='Is Deleted')),
                ('deleted_at', models.DateTimeField(blank=True, null=True, verbose_name='Deleted At')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is Active')),
                ('product_name', models.CharField(help_text='Name of the product.', max_length=200)),
                ('description', models.TextField(help_text='Detailed description of the product.')),
                ('usage_instructions', models.TextField(help_text='Instructions on how to use this product.')),
                ('safety_level', models.CharField(choices=[('safe', 'Safe'), ('caution', 'Use with Caution'), ('prescription', 'Prescription Only'), ('not_recommended', 'Not Recommended')], default='safe', help_text='Safety level of this product.', max_length=15)),
                ('pregnancy_safe', models.BooleanField(default=True, help_text='Whether this product is safe during pregnancy.')),
                ('min_age', models.PositiveIntegerField(blank=True, help_text='Minimum recommended age for using this product.', null=True)),
                ('max_age', models.PositiveIntegerField(blank=True, help_text='Maximum recommended age for using this product.', null=True)),
                ('category', models.ForeignKey(help_text='Category this product belongs to.', on_delete=django.db.models.deletion.CASCADE, to='recommendations.productcategory')),
            ],
            options={
                'verbose_name': 'Product',
                'verbose_name_plural': 'Products',
                'ordering': ['product_name'],
            },
        ),
        migrations.CreateModel(
            name='ProductIngredient',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('is_deleted', models.BooleanField(default=False, verbose_name='Is Deleted')),
                ('deleted_at', models.DateTimeField(blank=True, null=True, verbose_name='Deleted At')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is Active')),
                ('proportion', models.FloatField(help_text='Percentage proportion of this ingredient (0.0 - 1.0).', validators=[apps.shared.validators.validate_proportion])),
                ('notes', models.TextField(blank=True, help_text='Additional notes about this ingredient in this product.', null=True)),
                ('ingredient', models.ForeignKey(help_text='Ingredient in this product.', on_delete=django.db.models.deletion.CASCADE, related_name='products', to='recommendations.ingredient')),
                ('product', models.ForeignKey(help_text='Product containing this ingredient.', on_delete=django.db.models.deletion.CASCADE, related_name='ingredients', to='recommendations.product')),
            ],
            options={
                'verbose_name': 'Product Ingredient',
                'verbose_name_plural': 'Product Ingredients',
                'ordering': ['-proportion'],
            },
        ),
        migrations.CreateModel(
            name='Recommendation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('is_deleted', models.BooleanField(default=False, verbose_name='Is Deleted')),
                ('deleted_at', models.DateTimeField(blank=True, null=True, verbose_name='Deleted At')),
                ('generated_at', models.DateTimeField(help_text='Timestamp when the recommendation was generated.')),
                ('recommendation_type', models.CharField(choices=[('routine', 'Skincare Routine'), ('lifestyle', 'Lifestyle Advice'), ('medical', 'Medical Referral')], help_text='Type of recommendation (routine, lifestyle, medical referral).', max_length=20)),
                ('routine_morning', models.TextField(blank=True, help_text='Morning skincare routine recommendations.', null=True)),
                ('routine_evening', models.TextField(blank=True, help_text='Evening skincare routine recommendations.', null=True)),
                ('lifestyle_advice', models.TextField(blank=True, help_text='Lifestyle advice and general recommendations.', null=True)),
                ('safety_notes', models.TextField(blank=True, help_text='Important safety notes and warnings.', null=True)),
                ('is_active', models.BooleanField(default=True, help_text='Whether this recommendation is currently active.')),
                ('expires_at', models.DateTimeField(blank=True, help_text='When this recommendation expires.', null=True)),
                ('assessment', models.ForeignKey(help_text='Assessment this recommendation is based on.', on_delete=django.db.models.deletion.CASCADE, to='assessment.assessment')),
                ('user', models.ForeignKey(help_text='User receiving the recommendation.', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Recommendation',
                'verbose_name_plural': 'Recommendations',
                'ordering': ['-generated_at'],
            },
        ),
        migrations.CreateModel(
            name='RecommendedProduct',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('is_deleted', models.BooleanField(default=False, verbose_name='Is Deleted')),
                ('deleted_at', models.DateTimeField(blank=True, null=True, verbose_name='Deleted At')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is Active')),
                ('usage_frequency', models.CharField(choices=[('daily_am', 'Daily Morning'), ('daily_pm', 'Daily Evening'), ('twice_daily', 'Twice Daily'), ('weekly', 'Weekly'), ('as_needed', 'As Needed')], help_text='How frequently this product should be used.', max_length=15)),
                ('specific_instructions', models.TextField(blank=True, help_text='Specific instructions for using this product.', null=True)),
                ('priority_order', models.PositiveIntegerField(help_text='Priority order of this product in the recommendation.')),
                ('product', models.ForeignKey(help_text='Product being recommended.', on_delete=django.db.models.deletion.CASCADE, to='recommendations.product')),
                ('recommendation', models.ForeignKey(help_text='Recommendation this product belongs to.', on_delete=django.db.models.deletion.CASCADE, related_name='recommended_products', to='recommendations.recommendation')),
            ],
            options={
                'verbose_name': 'Recommended Product',
                'verbose_name_plural': 'Recommended Products',
                'ordering': ['priority_order'],
            },
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['category'], name='recommendat_categor_ca0ad8_idx'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['safety_level'], name='recommendat_safety__168354_idx'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['pregnancy_safe'], name='recommendat_pregnan_3d08e4_idx'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['is_active'], name='recommendat_is_acti_dffc50_idx'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['min_age'], name='recommendat_min_age_5f0ad9_idx'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['max_age'], name='recommendat_max_age_29a3c6_idx'),
        ),
        migrations.AddIndex(
            model_name='productingredient',
            index=models.Index(fields=['product'], name='recommendat_product_a89d92_idx'),
        ),
        migrations.AddIndex(
            model_name='productingredient',
            index=models.Index(fields=['ingredient'], name='recommendat_ingredi_541eba_idx'),
        ),
        migrations.AddIndex(
            model_name='productingredient',
            index=models.Index(fields=['proportion'], name='recommendat_proport_d125f7_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='productingredient',
            unique_together={('product', 'ingredient')},
        ),
        migrations.AddIndex(
            model_name='recommendation',
            index=models.Index(fields=['user'], name='recommendat_user_id_39fd0b_idx'),
        ),
        migrations.AddIndex(
            model_name='recommendation',
            index=models.Index(fields=['assessment'], name='recommendat_assessm_74f138_idx'),
        ),
        migrations.AddIndex(
            model_name='recommendation',
            index=models.Index(fields=['recommendation_type'], name='recommendat_recomme_1762d7_idx'),
        ),
        migrations.AddIndex(
            model_name='recommendation',
            index=models.Index(fields=['generated_at'], name='recommendat_generat_8461e0_idx'),
        ),
        migrations.AddIndex(
            model_name='recommendation',
            index=models.Index(fields=['is_active'], name='recommendat_is_acti_c98892_idx'),
        ),
        migrations.AddIndex(
            model_name='recommendation',
            index=models.Index(fields=['expires_at'], name='recommendat_expires_6bf04d_idx'),
        ),
        migrations.AddIndex(
            model_name='recommendedproduct',
            index=models.Index(fields=['recommendation'], name='recommendat_recomme_41c5e6_idx'),
        ),
        migrations.AddIndex(
            model_name='recommendedproduct',
            index=models.Index(fields=['product'], name='recommendat_product_829468_idx'),
        ),
        migrations.AddIndex(
            model_name='recommendedproduct',
            index=models.Index(fields=['usage_frequency'], name='recommendat_usage_f_087f69_idx'),
        ),
        migrations.AddIndex(
            model_name='recommendedproduct',
            index=models.Index(fields=['priority_order'], name='recommendat_priorit_b430f4_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='recommendedproduct',
            unique_together={('recommendation', 'product')},
        ),
    ]
