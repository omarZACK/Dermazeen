# Generated by Django 5.2.5 on 2025-09-01 16:18

import apps.shared.utils.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='ConditionCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Condition Category',
                'verbose_name_plural': 'Condition Categories',
                'ordering': ['id'],
                'indexes': [models.Index(fields=['name'], name='analysis_co_name_814974_idx'), models.Index(fields=['description'], name='analysis_co_descrip_aa59f2_idx')],
            },
        ),
        migrations.CreateModel(
            name='SkinAnalysis',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('is_deleted', models.BooleanField(default=False, verbose_name='Is Deleted')),
                ('deleted_at', models.DateTimeField(blank=True, null=True, verbose_name='Deleted At')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is Active')),
                ('image_url', models.URLField(help_text='URL of the uploaded skin image.')),
                ('image_metadata', models.JSONField(help_text='JSON data containing image resolution, lighting, etc.')),
                ('analyzed_at', models.DateTimeField(help_text='Timestamp when the analysis was performed.')),
                ('analysis_status', models.CharField(choices=[('pending', 'Pending'), ('processing', 'Processing'), ('completed', 'Completed'), ('failed', 'Failed')], help_text='Status of the analysis process.', max_length=10)),
                ('confidence_score', models.FloatField(help_text='Overall confidence score for the analysis.', validators=[apps.shared.utils.validators.validate_confidence_score])),
                ('user', models.ForeignKey(help_text='User who submitted the image for analysis.', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Skin Analysis',
                'verbose_name_plural': 'Skin Analyses',
                'ordering': ['-analyzed_at'],
            },
        ),
        migrations.CreateModel(
            name='SkinCondition',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('is_deleted', models.BooleanField(default=False, verbose_name='Is Deleted')),
                ('deleted_at', models.DateTimeField(blank=True, null=True, verbose_name='Deleted At')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is Active')),
                ('condition_name', models.CharField(help_text='Unique name of the skin condition.', max_length=100, unique=True)),
                ('description', models.TextField(help_text='Detailed description of the skin condition.')),
                ('is_chronic', models.BooleanField(default=False, help_text='Whether this condition is chronic.')),
                ('requires_medical_attention', models.BooleanField(default=False, help_text='Whether this condition requires medical attention.')),
                ('categories', models.ManyToManyField(help_text='Category under which this condition falls.', related_name='conditions', to='analysis.conditioncategory')),
            ],
            options={
                'verbose_name': 'Skin Condition',
                'verbose_name_plural': 'Skin Conditions',
                'ordering': ['condition_name'],
            },
        ),
        migrations.CreateModel(
            name='DetectedCondition',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('is_deleted', models.BooleanField(default=False, verbose_name='Is Deleted')),
                ('deleted_at', models.DateTimeField(blank=True, null=True, verbose_name='Deleted At')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is Active')),
                ('severity_level', models.CharField(choices=[('none', 'No Problem'), ('mild', 'Mild'), ('moderate', 'Moderate'), ('severe', 'Severe')], help_text='Severity level of the detected condition.', max_length=10)),
                ('confidence_score', models.FloatField(help_text='Confidence score for the condition detection.', validators=[apps.shared.utils.validators.validate_confidence_score])),
                ('detected_areas', models.TextField(help_text='Textual representation of affected areas (e.g., coordinates or labels).')),
                ('notes', models.TextField(help_text='AI-generated notes about this detection.')),
                ('analysis', models.ForeignKey(help_text='Associated skin analysis record.', on_delete=django.db.models.deletion.CASCADE, to='analysis.skinanalysis')),
                ('condition', models.ForeignKey(help_text='Detected skin condition.', on_delete=django.db.models.deletion.CASCADE, to='analysis.skincondition')),
            ],
            options={
                'verbose_name': 'Detected Condition',
                'verbose_name_plural': 'Detected Conditions',
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddIndex(
            model_name='skinanalysis',
            index=models.Index(fields=['user'], name='analysis_sk_user_id_1ea059_idx'),
        ),
        migrations.AddIndex(
            model_name='skinanalysis',
            index=models.Index(fields=['analysis_status'], name='analysis_sk_analysi_775df8_idx'),
        ),
        migrations.AddIndex(
            model_name='skinanalysis',
            index=models.Index(fields=['analyzed_at'], name='analysis_sk_analyze_ff0664_idx'),
        ),
        migrations.AddIndex(
            model_name='skinanalysis',
            index=models.Index(fields=['confidence_score'], name='analysis_sk_confide_7109a2_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='skinanalysis',
            unique_together={('user', 'image_url')},
        ),
        migrations.AddIndex(
            model_name='skincondition',
            index=models.Index(fields=['is_chronic'], name='analysis_sk_is_chro_106deb_idx'),
        ),
        migrations.AddIndex(
            model_name='skincondition',
            index=models.Index(fields=['requires_medical_attention'], name='analysis_sk_require_1598db_idx'),
        ),
        migrations.AddIndex(
            model_name='detectedcondition',
            index=models.Index(fields=['severity_level'], name='analysis_de_severit_a40711_idx'),
        ),
        migrations.AddIndex(
            model_name='detectedcondition',
            index=models.Index(fields=['confidence_score'], name='analysis_de_confide_3d38af_idx'),
        ),
        migrations.AddIndex(
            model_name='detectedcondition',
            index=models.Index(fields=['analysis', 'condition'], name='analysis_de_analysi_245a5d_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='detectedcondition',
            unique_together={('analysis', 'condition')},
        ),
    ]
