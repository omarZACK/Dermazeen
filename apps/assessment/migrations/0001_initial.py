# Generated by Django 5.2.4 on 2025-07-27 14:03

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('analysis', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Assessment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('is_deleted', models.BooleanField(default=False, verbose_name='Is Deleted')),
                ('deleted_at', models.DateTimeField(blank=True, null=True, verbose_name='Deleted At')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is Active')),
                ('started_at', models.DateTimeField(help_text='Timestamp when the assessment was started.')),
                ('completed_at', models.DateTimeField(blank=True, help_text='Timestamp when the assessment was completed.', null=True)),
                ('assessment_status', models.CharField(choices=[('started', 'Started'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('abandoned', 'Abandoned')], default='started', help_text='Current status of the assessment.', max_length=20)),
                ('analysis', models.OneToOneField(help_text='Associated skin analysis record.', on_delete=django.db.models.deletion.CASCADE, to='analysis.skinanalysis')),
                ('user', models.ForeignKey(help_text='User taking the assessment.', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Assessment',
                'verbose_name_plural': 'Assessments',
                'ordering': ['-started_at'],
            },
        ),
        migrations.CreateModel(
            name='QuestionTemplate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('is_deleted', models.BooleanField(default=False, verbose_name='Is Deleted')),
                ('deleted_at', models.DateTimeField(blank=True, null=True, verbose_name='Deleted At')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is Active')),
                ('display_order', models.PositiveIntegerField(default=0, help_text='Order in which items should be displayed', verbose_name='Display Order')),
                ('question_text', models.TextField(help_text='The text of the question to be displayed.')),
                ('question_type', models.CharField(choices=[('single', 'Single Choice'), ('multiple', 'Multiple Choice'), ('text', 'Text Input'), ('boolean', 'Yes/No'), ('scale', 'Rating Scale')], help_text='Type of question (single choice, multiple choice, etc.).', max_length=20)),
                ('options', models.JSONField(blank=True, help_text='JSON array of choices or parameters for UI rendering.', null=True)),
                ('condition_triggers', models.TextField(blank=True, help_text='Conditions that trigger this question (e.g. acne -> hormonal questions).', null=True)),
            ],
            options={
                'verbose_name': 'Question Template',
                'verbose_name_plural': 'Question Templates',
                'ordering': ['display_order'],
                'indexes': [models.Index(fields=['question_type'], name='assessment__questio_696bc9_idx'), models.Index(fields=['display_order'], name='assessment__display_050934_idx'), models.Index(fields=['is_active'], name='assessment__is_acti_59e953_idx')],
            },
        ),
        migrations.CreateModel(
            name='AssessmentResponse',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('is_deleted', models.BooleanField(default=False, verbose_name='Is Deleted')),
                ('deleted_at', models.DateTimeField(blank=True, null=True, verbose_name='Deleted At')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is Active')),
                ('answer_value', models.TextField(help_text="The user's answer to the question.")),
                ('answered_at', models.DateTimeField(help_text='Timestamp when the question was answered.')),
                ('assessment', models.ForeignKey(help_text='Assessment this response belongs to.', on_delete=django.db.models.deletion.CASCADE, related_name='responses', to='assessment.assessment')),
                ('question', models.ForeignKey(help_text='Question that was answered.', on_delete=django.db.models.deletion.CASCADE, to='assessment.questiontemplate')),
            ],
            options={
                'verbose_name': 'Assessment Response',
                'verbose_name_plural': 'Assessment Responses',
                'ordering': ['-answered_at'],
            },
        ),
        migrations.AddIndex(
            model_name='assessment',
            index=models.Index(fields=['user'], name='assessment__user_id_c70511_idx'),
        ),
        migrations.AddIndex(
            model_name='assessment',
            index=models.Index(fields=['analysis'], name='assessment__analysi_1e78e4_idx'),
        ),
        migrations.AddIndex(
            model_name='assessment',
            index=models.Index(fields=['assessment_status'], name='assessment__assessm_bcacfd_idx'),
        ),
        migrations.AddIndex(
            model_name='assessment',
            index=models.Index(fields=['started_at'], name='assessment__started_d41c25_idx'),
        ),
        migrations.AddIndex(
            model_name='assessment',
            index=models.Index(fields=['completed_at'], name='assessment__complet_333143_idx'),
        ),
        migrations.AddIndex(
            model_name='assessmentresponse',
            index=models.Index(fields=['assessment'], name='assessment__assessm_40185e_idx'),
        ),
        migrations.AddIndex(
            model_name='assessmentresponse',
            index=models.Index(fields=['question'], name='assessment__questio_5284c7_idx'),
        ),
        migrations.AddIndex(
            model_name='assessmentresponse',
            index=models.Index(fields=['answered_at'], name='assessment__answere_3a2c70_idx'),
        ),
        migrations.AddIndex(
            model_name='assessmentresponse',
            index=models.Index(fields=['assessment', 'question'], name='assessment__assessm_6801d6_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='assessmentresponse',
            unique_together={('assessment', 'question')},
        ),
    ]
